@page "/"
@using Microsoft.AspNetCore.Identity
@using PropertyWebApp.Models
@using PropertyWebApp.Models.Services
@layout Layout.HomeLayout
@inject UserStateService userStateService
@inject PropertyService PropertyService
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<div class="home-body">
    <div class="home-page">
        <h1 class="hero-nadpis">
            Nájdite Svoj Domov
            Jednoducho A Rýchlo
        </h1>
        <p class="hero-podtext" >Sed elit urna, imperdiet eget bibendum quis, convallis non massa.</p>

        <div class="search-bar">
            <input type="text" placeholder="Lokalita napr. Žilina" class="w-full px-4 py-2 border rounded-md"
                   @bind="SearchLocation" />
            <select class="property-type-search w-full px-4 py-2 border rounded-md" @bind="SearchType">
                <option value="">Vyber typ nehnuteľnosti</option>
                @if(PropertyTypes != null){
                @foreach (var type in PropertyTypes)
                {
                    <option value="@type.TypeName">@type.TypeName</option>
                }
                }
               
            </select>
            <input type="text" placeholder="Cena" class="w-full px-4 py-2 border rounded-md" @bind="SearchPrice" />
            <input type="submit" value="Vyhľadať" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
                   @onclick="HandleSearch" >
                   </input>
        </div>

        <div class="popular-searches">
            <span>Obľúbené Vyhľadávania: </span>
            <a href="#" @onclick='() => HandlePopularSearch("Bratislava", "Byt")'>Bratislava, Byt</a>
            <a href="#" @onclick='() => HandlePopularSearch("Bratislava", "Dom")'>Bratislava, Dom</a>
            <a href="#" @onclick='() => HandlePopularSearch("Žilina", "Byt")'>Žilina, Byt</a>
        </div>
    </div>
    <!-- Dolné filtrovanie vyhľadávania -->
    <div class="w-full p-4 bg-white pr-20 pl-20">
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4 items-end">
            <!-- Looking For -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Looking For</label>
                <input type="text"
                       placeholder="Meno"
                       class="w-full px-4 py-2 border rounded-lg text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                       @bind="Name" />
            </div>

            <!-- Type -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Type</label>
                <select class="w-full px-4 py-2 border rounded-lg text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        @bind="SearchType">
                    <option value="">Vyber typ nehnuteľnosti</option>
                    @if (PropertyTypes != null)
                    {
                        @foreach (var type in PropertyTypes)
                        {
                            <option value="@type.TypeName">@type.TypeName</option>
                        }
                    }
                </select>
            </div>

            <!-- Price -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Price</label>
                <input type="text"
                       placeholder="$1,000 - $50,000"
                       class="w-full px-4 py-2 border rounded-lg text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                       @bind="SearchPrice" />
            </div>

            <!-- Location -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                <input type="text"
                       placeholder="Indonesia"
                       class="w-full px-4 py-2 border rounded-lg text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                       @bind="SearchLocation" />
            </div>

            <!-- Buttons -->
            <div class="flex gap-2 items-center ml-auto">
                <button class="px-3 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-lg focus:ring-2 focus:ring-indigo-500"
                        @onclick="HandleSearch2">
                    🔍
                </button>
            </div>
        </div>

        <!-- Results -->
        <div class="flex justify-between items-center mt-6">
            <div>
                <h2 class="text-xl font-semibold text-gray-800">@SearchLocation</h2>
                <p class="text-gray-600"> <span class="font-bold text-gray-800">@(FilteredProperties?.Count() ?? 0)</span> nehnuteľností</p>
            </div>
            <div class="mt-4 flex items-center">
    <p class="text-gray-700 mr-2">Sort By:</p>
                <select class="px-3 py-2 border rounded-lg text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        @onchange="HandleSortChange">
                    <option value="Default">Default</option>
                    <option value="PriceLowHigh">Price: Low to High</option>
                    <option value="PriceHighLow">Price: High to Low</option>
                    <option value="Newest">Newest Listings</option>
                </select>
</div>
        </div>
    </div>





    <div class="min-h-screen bg-white p-6 pr-10 pl-10" id="resultSection">
        <!-- Property Grid -->
        <div class="container mx-auto mt-6">
            @if (AvailableProperties == null)
            {
                <p>Loading properties...</p>
            }
            else if (!AvailableProperties.Any())
            {
                <p>No properties found.</p>
            }
            else
            {
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    @foreach (var property in FilteredProperties)
                    {
                        <div class="bg-white overflow-hidden" >
                            <img src="@property.PropertyImages.FirstOrDefault().ImagePath" alt="Property Image" class="w-full h-64 object-cover rounded-xl">
                            <div class="mt-2">
                                <div class="flex justify-between">
                                    <h3 class="text-lg font-semibold text-gray-800">@property.PropertyName</h3>
                                    <h3 class="text-lg font-semibold text-gray-800">@property.Price €</h3>
                                </div>
                                <p class="text-gray-600">@property.City, @property.Country</p>
                                <div class="flex items-center space-x-6 mt-2">
                                    <div class="flex items-center text-sm text-gray-500 space-x-2">
                                        <div class="flex rounded-md outline outline-offset-2 outline-1 gap-2 p-2">
                                            <img src="/img/icons/area.png" class="w-6 h-6" />
                                            <p class="text-lg">@property.Area m²</p>
                                        </div>
                                        <div class="flex rounded-md outline-2 outline-blue-500 gap-2 p-2">
                                            <img src="/img/icons/bed.png" class="w-6 h-6" />
                                            <p class="text-lg">@property.NumberOfBedrooms</p>
                                        </div>
                                        <div class="flex rounded-md outline-2 outline-blue-500 gap-2 p-2">
                                            <img src="/img/icons/bath.png" class="w-6 h-6" />
                                            <p class="text-lg">@property.NumberOfBathrooms</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Property> AvailableProperties;
    private List<Property> FilteredProperties;
    private List<PropertyType> PropertyTypes;
    private string SearchLocation { get; set; }
    private string SearchType { get; set; }
    private string SearchPrice { get; set; }
    private string Name { get; set; }
    
    private string SortBy { get; set; } = "Default";

    protected override async Task OnInitializedAsync()
    {
        // Načítanie typov nehnuteľností a všetkých nehnuteľností
        PropertyTypes = await PropertyService.GetPropertyTypesAsync();
        AvailableProperties = await PropertyService.GetAvailablePropertiesAsync();
        FilteredProperties = AvailableProperties; // Prednastavenie na všetky
    }

    private async Task HandleSearch()
    {
        // Konverzia ceny na decimal
        decimal.TryParse(SearchPrice, out var maxPrice);

        // Zavolaj funkciu vyhľadávania a aktualizuj zoznam dostupných nehnuteľností
        FilteredProperties = await PropertyService.SearchPropertiesAsync(Name, SearchLocation, SearchType, maxPrice);
        await JSRuntime.InvokeVoidAsync("scrollToElement", "resultSection");
        StateHasChanged();
    }

    private async Task HandleSearch2()
    {
       // Konverzia ceny na decimal
        decimal.TryParse(SearchPrice, out var maxPrice);

        // Vyhľadávanie s filtrom

        FilteredProperties = await PropertyService.SearchPropertiesAsync(Name, SearchLocation, SearchType, maxPrice);

        ApplySorting();
        StateHasChanged();
    }


    private async Task HandlePopularSearch(string location, string type)
    {
        SearchLocation = location;
        SearchType = type;

        AvailableProperties = await PropertyService.SearchPropertiesAsync("", location, type, null);
        await HandleSearch();
    }
    

    private async Task HandleSortChange(ChangeEventArgs e)
    {
        // Získanie novej hodnoty triedenia z `onchange` eventu
        SortBy = e.Value.ToString();

        // Aplikovanie triedenia
        ApplySorting();
    }

    private void ApplySorting()
    {
        switch (SortBy)
        {
            case "PriceLowHigh":
                FilteredProperties = FilteredProperties.OrderBy(p => p.Price).ToList();
                break;
            case "PriceHighLow":
                FilteredProperties = FilteredProperties.OrderByDescending(p => p.Price).ToList();
                break;
            case "Newest":
                FilteredProperties = FilteredProperties.OrderByDescending(p => p.ListingDate).ToList();
                break;
            default:
                // Defaultné zoradenie
                //FilteredProperties = AvailableProperties;
                break;
        }

        // Manuálne obnovenie UI
        StateHasChanged();
    }
}
