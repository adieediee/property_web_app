@page "/properties"
@layout Layout.PrenajimatelLayout
@using PropertyWebApp.Models.Services
@using PropertyWebApp.Data.ViewModels
@inject PropertyService PropertyService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="properties-main-container">
    <!-- Ľavá strana: Zoznam kartičiek -->
    <div class="properties-list @(selectedProperty != null ? "collapsed" : "")">
        @if (properties == null)
        {
            <p>Načítavam nehnuteľnosti...</p>
        }
        else if (!properties.Any())
        {
            <p>Žiadne nehnuteľnosti na zobrazenie.</p>
        }
        else
        {
            <div class="cards-grid">
                @foreach (var property in properties)
                {
                    <div class="property-card" @onclick="() => ShowPropertyDetails(property.PropertyId)">
                        <div class="property-background" style="background-image: url('@property.MainImage')">
                            <div class="property-info">
                                <h4>@property.PropertyName</h4>
                                <div class="tenant-info">
                                    <img class="tenant-avatar" src="@property.TenantAvatar" alt="Tenant Avatar" />
                                    <p>@property.TenantName</p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <a href="/edit-property">
                <div class="property-card">
                        Pridat novu nehnutelnost
                </div>
                </a>
            </div>
        }

        
    </div>

    <!-- Pravá strana: Detaily nehnuteľnosti -->
    @if (selectedProperty != null)
    {
        <div class="property-details">
            <img class="property-details-image" src="@selectedProperty.MainImage" alt="Property Image" />
            <h2>@selectedProperty.PropertyName</h2>
            <p>@selectedProperty.Description</p>
            <div class="overview">
                <p><strong>Bedrooms:</strong> @selectedProperty.NumberOfBedrooms</p>
                <p><strong>Bathrooms:</strong> @selectedProperty.NumberOfBathrooms</p>
                <p><strong>Area:</strong> @selectedProperty.Area m²</p>
                <p><strong>Price:</strong> @selectedProperty.Price €</p>
            </div>

            <!-- Buttons for Edit and Delete -->
            <div class="actions">
                <button class="btn-edit" @onclick="EditProperty">Edit</button>
                <button class="btn-delete" @onclick="ShowDeleteConfirmation">Delete</button>
            </div>
        </div>
    }

    <!-- Modal Confirmation for Delete -->
    @if (showDeleteConfirmation)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h4>Ste si istí, že chcete vymazať túto nehnuteľnosť?</h4>
                <div class="modal-actions">
                    <button class="btn-yes" @onclick="ConfirmDelete">Áno</button>
                    <button class="btn-no" @onclick="CancelDelete">Nie</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<PropertyScreenViewModel> properties;
    private PropertyScreenViewModel? selectedProperty;
    private bool showDeleteConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        properties = await PropertyService.GetAllPropertiesAsync();
    }

    private async Task ShowPropertyDetails(int propertyId)
    {
        selectedProperty = await PropertyService.GetPropertyByIdAsync(propertyId);
    }

    private void EditProperty()
    {
        if (selectedProperty != null)
        {
            // Redirect to the edit page for the selected property
            Navigation.NavigateTo($"/edit-property/{selectedProperty.PropertyId}");
        }
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDelete()
    {
        if (selectedProperty != null)
        {
            bool isDeleted = await PropertyService.DeletePropertyAsync(selectedProperty.PropertyId);
            if (isDeleted)
            {
                properties.RemoveAll(p => p.PropertyId == selectedProperty.PropertyId);
                selectedProperty = null; // Close the details view
            }
        }

        // Close the confirmation modal
        showDeleteConfirmation = false;
    }

    private void CancelDelete()
    {
        // Close the confirmation modal without deleting
        showDeleteConfirmation = false;
    }

    private void ClosePropertyDetails()
    {
        selectedProperty = null;
    }

    private void NavigateToAddProperty()
    {
        // Redirect to the add property page
        Navigation.NavigateTo("/add-property/1");
    }
}
