@page "/properties"
@layout Layout.PrenajimatelLayout
@using PropertyWebApp.Models.Services
@using PropertyWebApp.Data.ViewModels
@inject PropertyService PropertyService
@inject NavigationManager Navigation
@inject UserStateService UserStateService
@rendermode InteractiveServer

@if (properties != null)
{
    <div class="flex h-screen">
        <!-- Ľavá strana - Zoznam kartičiek -->
        <div class="w-full lg:w-2/3 p-4">
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                @foreach (var property in properties)
                {
                    <div class="relative bg-white shadow-md rounded-2xl overflow-hidden cursor-pointer hover:shadow-lg transition-shadow duration-300 h-64 " @onclick="() => ShowPropertyDetails(property.PropertyId)">
                        <!-- Obrázok nehnuteľnosti -->
                        <img class="w-full h-full object-cover" src="@property.MainImage" alt="Property Image">

                        <!-- Obsah kartičky -->
                        <div class="absolute bottom-2 left-2 right-2 bg-white p-3 rounded-2xl">
                            <!-- Názov nehnuteľnosti -->
                            <h4 class="text-sm font-semibold text-gray-800 leading-tight truncate">
                                @property.PropertyName
                            </h4>

                            <!-- Informácie o nájomcovi -->
                            <div class="flex items-center mt-2 text-sm text-gray-600">
                                <img class="w-6 h-6 rounded-full mr-2" src="@property.TenantAvatar" alt="Tenant Avatar">
                                <p class="truncate">@property.TenantName</p>
                            </div>
                        </div>
                    </div>
                }
                <!-- Tlačidlo pridať nehnuteľnosť -->
                <div class="flex justify-center items-center bg-gray-200 rounded-lg cursor-pointer h-40" @onclick="NavigateToAddProperty">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                </div>
            </div>
        </div>

        <!-- Pravá strana - Detaily nehnuteľnosti -->
        @if (selectedProperty != null)
        {
            <div class="hidden lg:block w-1/3 bg-white p-6 shadow-lg">
                <img class="w-full h-64 object-cover rounded-lg mb-4" src="@selectedProperty.MainImage" alt="Property Image">
                <h2 class="text-xl font-bold text-gray-800">@selectedProperty.PropertyName</h2>
                <p class="mt-2 text-gray-600">@selectedProperty.Description</p>
                <div class="grid grid-cols-2 gap-4 mt-4">
                    <p><strong>Bedrooms:</strong> @selectedProperty.NumberOfBedrooms</p>
                    <p><strong>Bathrooms:</strong> @selectedProperty.NumberOfBathrooms</p>
                    <p><strong>Area:</strong> @selectedProperty.Area m²</p>
                    <p><strong>Price:</strong> @selectedProperty.Price €</p>
                </div>
                <div class="flex items-center gap-4 mt-6">
                    <button class="px-4 py-2 bg-blue-500 text-white rounded-lg" @onclick="EditProperty">Edit</button>
                    <button class="px-4 py-2 bg-red-500 text-white rounded-lg" @onclick="ShowDeleteConfirmation">Delete</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<PropertyScreenViewModel> properties;
    private PropertyScreenViewModel? selectedProperty;
    private bool showDeleteConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        properties = await PropertyService.LoadUserPropertiesAsync(UserStateService.Id);
        //properties = await PropertyService.GetAllPropertiesAsync();
    }

    private async Task ShowPropertyDetails(int propertyId)
    {
        selectedProperty = await PropertyService.GetPropertyByIdAsync(propertyId);
        StateHasChanged();
    }

    private void EditProperty()
    {
        if (selectedProperty != null)
        {
            // Navigácia
            Navigation.NavigateTo($"/edit-property/{selectedProperty.PropertyId}");
        }
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDelete()
    {
        if (selectedProperty != null)
        {
            bool isDeleted = await PropertyService.DeletePropertyAsync(selectedProperty.PropertyId);
            if (isDeleted)
            {
                properties.RemoveAll(p => p.PropertyId == selectedProperty.PropertyId);
                selectedProperty = null; // Zatvorí proeprty-details
            }
        }

        showDeleteConfirmation = false;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }

    private void ClosePropertyDetails()
    {
        selectedProperty = null;
    }

    private void NavigateToAddProperty()
    {
        
        Navigation.NavigateTo($"/edit-property/");
    }
}
