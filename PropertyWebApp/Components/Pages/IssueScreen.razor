@using Microsoft.EntityFrameworkCore
@using PropertyWebApp.Components.Pages.ViewModels
@using PropertyWebApp.Data
@using PropertyWebApp.Models
@using PropertyWebApp.Models.Services.PropertyWebApp.Services
@page "/propertyScreen"
@rendermode InteractiveServer
@layout Layout.PrenajimatelLayout
@inject IssueScreenViewModel ViewModel


<div class="toolbar">
    <button class="circle-btn">
        <i class="icon-filter"></i>
    </button>

    <div class="search-container">
        <input type="text" placeholder="Search Anything..." class="search-input" />
        <button class="search-btn">
            <i class="icon-search"></i>
        </button>
    </div>

    <a href="/edit-issue" class="circle-btn add">
        <i class="icon-add"></i>
    </a>
</div>

@if (ViewModel.Issues == null)
{
    <p>Načítavam údaje...</p>
}
else if (!ViewModel.Issues.Any())
{
    <p>Žiadne poruchy na zobrazenie.</p>
}
else
{
    <div class="list-container">
        @foreach (var issue in ViewModel.Issues)
        {
            <div class="card">
                <div class="issue-header" @onclick="() => ViewModel.ToggleDetails(issue.IssueId)">
                    <div class="card-left">
                        <img class="property-image" src="@ViewModel.GetPropertyImage(issue.IssueId)" alt="Property Image" />
                        <div class="card-text">
                            <h4 class="issue-title">@issue.Title</h4>
                            <p class="issue-subtitle">@issue.Property.PropertyName</p>
                        </div>
                    </div>
                    <div class="card-center">
                        <p class="issue-date">@issue.ReportDate.ToString("dd/MM/yyyy")</p>
                        <div class="tags">
                            @if (issue.TaggedIssues != null)
                            {
                                @foreach (var tag in issue.TaggedIssues)
                                {
                                    <span class="tag">@tag.Tag.TagName</span>
                                }
                            }
                        </div>
                        <p class="issue-cost">@ViewModel.GetIssueCost(issue.IssueId)?.ToString("F2") €</p>
                    </div>
                    <div class="card-right">
                        <span class="status" style="background-color:@issue.Status.Color">@issue.Status.StatusName</span>
                        <button class="menu-btn">⋮</button>
                    </div>
                </div>
                @if (ViewModel.ExpandedIssueId == issue.IssueId)
                {
                    <div class="issue-details">
                        <p class="issue-description">@issue.Description</p>
                        <div class="image-gallery">
                            @foreach (var image in issue.Images ?? Enumerable.Empty<IssueImage>())
                            {
                                <img src="@image.ImagePath" alt="Obrázok poruchy" class="image-box" />
                            }
                        </div>
                        <div class="card-actions">
                            <button class="delete-btn" @onclick="() => ViewModel.DisplayConfirmDialog(issue.IssueId)">Delete</button>
                            <a href="/edit-issue/@issue.IssueId" class="edit-btn">Edit</a>
                        </div>
                    </div>
                }
                @if (ViewModel.ShowConfirmDialog)
                {
                    <div class="confirm-dialog">
                        <div class="dialog-content">
                            <p>Chcete naozaj vymazať?</p>
                            <div class="dialog-actions">
                                <button class="confirm-btn" @onclick="ViewModel.ConfirmDeleteAsync">Áno</button>
                                <button class="cancel-btn" @onclick="ViewModel.CancelDelete">Nie</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadIssuesAsync();
        foreach (var issue in ViewModel.Issues)
        {
            await ViewModel.LoadPropertyIssueImageAsync();
        }
    }
    

}
