@using Microsoft.EntityFrameworkCore
@using PropertyWebApp.Data
@using PropertyWebApp.Models
@page "/propertyScreen"
@rendermode InteractiveServer
@layout Layout.PrenajimatelLayout




<div class="toolbar">
    <button class="circle-btn">
        <i class="icon-filter"></i>
    </button>

    <div class="search-container">
        <input type="text" placeholder="Search Anything..." class="search-input" />
        <button class="search-btn">
            <i class="icon-search"></i>
        </button>
    </div>

    <a href="/add-issue" class="circle-btn add">
        <i class="icon-add"></i>
    </a>
</div>

@if (issues == null)
{
    <p>Načítavam údaje...</p>
}
else if (!issues.Any())
{
    <p>Žiadne poruchy na zobrazenie.</p>
}
else
{
    <div class="list-container">
        @foreach (var issue in issues)
        {
            <div class="card">
                <div class="issue-header" @onclick="() => ToggleDetails(issue.IssueId)">
                    <!-- Ľavá časť: obrázok a texty -->
                    <div class="card-left">
                        <img class="property-image" src="@GetPropertyImage(issue.PropertyId)" alt="Property Image" />
                        <div class="card-text">
                            <h4 class="issue-title">@issue.Title</h4>
                            <p class="issue-subtitle">@GetPropertyName(issue.PropertyId)</p>
                        </div>
                    </div>

                    <!-- Stredná časť: dátum, tagy, cena -->
                    <div class="card-center">
                        <p class="issue-date">@issue.ReportDate.ToString("dd/MM/yyyy")</p>
                        <div class="tags">
                            @if (issue.TaggedIssues != null)
                            {
                                @foreach (var tag in issue.TaggedIssues)
                                {
                                    <span class="tag">@tag.Tag.TagName</span>
                                }
                            }
                        </div>
                        <p class="issue-cost">@GetIssueCost(issue.IssueId)?.ToString("F2") €</p>
                    </div>

                    <!-- Pravá časť: stav a menu -->
                    <div class="card-right">
                        <span class="status">@issue.Status.StatusName</span>
                        <button class="menu-btn">⋮</button>
                    </div>
                </div>
                @if (expandedIssueId == issue.IssueId)
                {
                    <div class="issue-details">
                        <p class="issue-description">@issue.Description</p>
                        <div class="image-gallery">
                            @foreach (var image in issue.Images ?? Enumerable.Empty<IssueImage>())
                            {
                                <img src="@image.ImagePath" alt="Obrázok poruchy" class="image-box" />
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}


@code {
    private List<Issue> issues;
    private int? expandedIssueId;

    @inject AppDbContext DbContext;

    protected override async Task OnInitializedAsync()
    {
        // Načítanie porúch vrátane obrázkov, stavu a tagov
        issues = await DbContext.Issues
            .Include(i => i.Images)
            .Include(i => i.Status)
            .Include(i => i.TaggedIssues)
                .ThenInclude(ti => ti.Tag)
            .ToListAsync();
    }

    private string GetPropertyName(int propertyId)
    {
        var property = DbContext.Properties.FirstOrDefault(p => p.PropertyId == propertyId);
        return property?.PropertyName ?? "Neznáma nehnuteľnosť";
    }

    private string GetPropertyImage(int propertyId)
    {
        var propertyImage = DbContext.PropertyImages.FirstOrDefault(pi => pi.PropertyId == propertyId);
        return propertyImage?.ImagePath ?? "/img/placeholder.png";
    }

    private decimal? GetIssueCost(int issueId)
    {
        // Predpokladáme, že Issue má napojené náklady (napr. RepairCosts)
        var repairCost = DbContext.RepairCosts.FirstOrDefault(rc => rc.RepairId == issueId);
        return repairCost?.PaymentId ?? null;
    }

    public void ToggleDetails(int issueId)
    {
        expandedIssueId = expandedIssueId == issueId ? null : issueId;
    }
}



