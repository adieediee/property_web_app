@using Microsoft.EntityFrameworkCore
@using PropertyWebApp.Components.Pages.ViewModels
@using PropertyWebApp.Components.Reusable
@using PropertyWebApp.Data
@using PropertyWebApp.Models
@using PropertyWebApp.Models.Services
@using PropertyWebApp.Models.Services.PropertyWebApp.Services
@page "/issues-screen"
@rendermode InteractiveServer
@layout Layout.PrenajimatelLayout
@inject IssueScreenViewModel ViewModel
@inject UserStateService UserStateService

<Toolbar SearchPlaceholder="Hľadaj poruchy..."
         AddButtonText="Pridať poruchu"
         AddButtonLink="/edit-issue/"
         OnSearch="PerformIssueSearch"
         OnSettingsClick="OpenSettings" />




@if (ViewModel.FilteredIssues == null)
{
    <p>Načítavam údaje...</p>
}
else if (!ViewModel.FilteredIssues.Any())
{
    <p class="flex items-center justify-center h-full text-gray-300 text-3xl font-semibold">Yayy! Žiadne poruchy.</p>
}
else
{
    <div class="list-container">
        @foreach (var issue in ViewModel.FilteredIssues)
        {
            <div class="card">
                <div class="issue-header" @onclick="() => ViewModel.ToggleDetails(issue.IssueId)">
                    <div class="card-left">
                        <img class="property-image" src="@ViewModel.GetPropertyImage(issue.PropertyId)" alt="Property Image" />
                        <div class="card-text">
                            <h4 class="issue-title">@issue.Title</h4>
                            <p class="issue-subtitle">@issue.Property.PropertyName</p>
                        </div>
                    </div>
                    <div class="card-center">
                        <p class="issue-date">@issue.ReportDate.ToString("dd/MM/yyyy")</p>
                        <div class="tags">
                            @if (issue.TaggedIssues != null)
                            {
                                @foreach (var tag in issue.TaggedIssues)
                                {
                                    <span class="tag">@tag.Tag.TagName</span>
                                }
                            }
                        </div>
                        <p class="issue-cost">@ViewModel.GetIssueCost(issue.IssueId)?.ToString("F2") €</p>
                    </div>
                    <div class="card-right">
                        <span class="status" style="background-color:@issue.Status.Color">@issue.Status.StatusName</span>
                        <button class="menu-btn">⋮</button>
                    </div>
                </div>
                @if (ViewModel.ExpandedIssueId == issue.IssueId)
                {
                    <div class="issue-details">
                        <p class="issue-description">@issue.Description</p>
                        <div class="flex items-center">
                        <div class="image-gallery">
                            @foreach (var image in issue.Images ?? Enumerable.Empty<IssueImage>())
                            {
                                <img src="@image.ImagePath" alt="Obrázok poruchy" class="image-box" />
                            }
                           
                        </div>
                            <div class="ml-auto flex flex-col items-center gap-2">
                           
                            <a href="/edit-issue/@issue.IssueId" class="edit-btn">Edit</a>
                                <button class="delete-btn" @onclick="() => ViewModel.DisplayConfirmDialog(issue.IssueId)">Delete</button>
                        </div>
                            </div>
                    </div>
                }
              
            </div>
        }
    </div>
    <ConfirmDialog IsVisible="ViewModel.ShowConfirmDialog"
                   Title="Potvrdenie"
                   Message="Naozaj chcete vymazať túto poruchu?"
                   ConfirmText="Vymazať"
                   CancelText="Zrušiť"
                   OnConfirm="ViewModel.ConfirmDeleteAsync"
                   OnCancel="ViewModel.CancelDelete" />

}


@code {


    private string searchQuery = "";
    

    protected override async Task OnInitializedAsync()
    {

        await ViewModel.LoadIssuesAsync(UserStateService.Id);


        foreach (var issue in ViewModel.Issues)
        {
            await ViewModel.LoadPropertyIssueImageAsync();

        }
        ViewModel.FilteredIssues = ViewModel.Issues;
    }

    private void PerformSearch(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";

        // Filtrovanie issues na základe názvu alebo popisu
        ViewModel.FilteredIssues = ViewModel.Issues
            .Where(i => (i.Title != null && i.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                        (i.Description != null && i.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }
    

    
     
    private void PerformIssueSearch(string query)
    {
        // Filtrovanie porúch podľa vyhľadávacieho reťazca
        ViewModel.FilteredIssues = ViewModel.Issues
            .Where(i => (i.Title != null && i.Title.Contains(query, StringComparison.OrdinalIgnoreCase)) ||
                        (i.Description != null && i.Description.Contains(query, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    private void OpenSettings()
    {
        // Logika pre otvorenie nastavení
        Console.WriteLine("Otvorené nastavenia pre IssuesScreen.");
    }

}
