@using PropertyWebApp.Models.Services

<!DOCTYPE html>
<html lang="en">

<head >
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="PropertyWebApp.styles.css" />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@latest/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="app.css" />
    
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet  />
    <script src="scripts.js"></script>
</head>

<body>
    <Routes  />
    <script src="_framework/blazor.web.js"></script>
    <script src="/_framework/aspnetcore-browser-refresh.js"></script>
</body>

</html>

@inject UserStateService UserStateService
@inject AuthenticationStateProvider AuthenticationStateProvider

@code {
    private Task? _initializationTask;

    protected override Task OnInitializedAsync()
    {
        if (_initializationTask == null)
        {
            _initializationTask = InitializeAsync();
        }
        return _initializationTask;
    }

    private async Task InitializeAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            var userName = user.Identity.Name ?? "Unknown";
            var role = user.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value ?? "Unknown";

            await UserStateService.SetUserInfo(userName, userId);
            await UserStateService.SetRole(role);
        }
    }
}
